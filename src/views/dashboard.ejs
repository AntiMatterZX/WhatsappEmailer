<%- contentFor('body') %>

<div class="dashboard-container p-4">
  <div class="row mb-4">
    <div class="col-md-12">
      <h1 class="dashboard-title mb-3">Dashboard</h1>
      <% if (typeof user !== 'undefined' && user && user.username) { %>
        <p class="text-secondary">Welcome, <%= user.username %>! Here's an overview of your WhatsApp Bot system.</p>
      <% } else { %>
        <p class="text-secondary">Welcome to your WhatsApp Bot system overview.</p>
      <% } %>
    </div>
  </div>

  <div class="row mb-4 g-4">
    <div class="col-md-3">
      <div class="card-dark h-100">
        <div class="card-body">
          <div class="d-flex justify-content-between mb-3">
            <div>
              <h5 class="card-title text-white">Active Groups</h5>
              <p class="card-text text-secondary">Total groups being monitored</p>
            </div>
            <div class="stats-icon text-primary">
              <i class="bi bi-chat-square-text"></i>
            </div>
          </div>
          <p class="card-text numbers text-primary" id="activeGroups">--</p>
        </div>
      </div>
    </div>
    
    <div class="col-md-3">
      <div class="card-dark h-100">
        <div class="card-body">
          <div class="d-flex justify-content-between mb-3">
            <div>
              <h5 class="card-title text-white">Today's Messages</h5>
              <p class="card-text text-secondary">Messages processed today</p>
            </div>
            <div class="stats-icon text-primary">
              <i class="bi bi-chat-dots"></i>
            </div>
          </div>
          <p class="card-text numbers text-primary" id="todayMessages">--</p>
        </div>
      </div>
    </div>
    
    <div class="col-md-3">
      <div class="card-dark h-100">
        <div class="card-body">
          <div class="d-flex justify-content-between mb-3">
            <div>
              <h5 class="card-title text-white">Emails Sent</h5>
              <p class="card-text text-secondary">Total emails forwarded</p>
            </div>
            <div class="stats-icon text-primary">
              <i class="bi bi-envelope"></i>
            </div>
          </div>
          <p class="card-text numbers text-primary" id="emailsSent">--</p>
        </div>
      </div>
    </div>
    
    <div class="col-md-3">
      <div class="card-dark h-100">
        <div class="card-body">
          <div class="d-flex justify-content-between mb-3">
            <div>
              <h5 class="card-title text-white">System Status</h5>
              <p class="card-text text-secondary">Overall system health</p>
            </div>
            <div class="stats-icon text-primary">
              <i class="bi bi-heart-pulse"></i>
            </div>
          </div>
          <p class="card-text" id="systemStatus">
            <span class="badge bg-success">Healthy</span>
          </p>
        </div>
      </div>
    </div>
  </div>

  <div class="row mb-4">
    <div class="col-md-6">
      <div class="card-dark h-100">
        <div class="card-header d-flex justify-content-between align-items-center">
          <div class="d-flex align-items-center">
            <i class="bi bi-terminal me-2"></i>
            <span>Recent Activity</span>
          </div>
          <div>
            <button id="liveLogToggle" class="btn-dark-outline me-2 btn-sm">
              <i class="bi bi-play-fill"></i> Live
            </button>
            <a href="/logs" class="btn-dark-outline btn-sm">
              <i class="bi bi-arrow-right"></i>
            </a>
          </div>
        </div>
        <div class="card-body p-0">
          <div id="recentLogs" style="height: 250px; overflow-y: auto; font-family: monospace;" class="bg-black">
            <div id="liveBadge" class="d-none position-absolute m-2" style="right: 20px; z-index: 10;">
              <span class="badge bg-primary pulse">LIVE</span>
            </div>
            <table class="terminal-log-table w-100" style="table-layout: fixed;">
              <thead>
                <tr>
                  <th style="width: 25%;">Time</th>
                  <th style="width: 15%;">Status</th>
                  <th style="width: 60%;">Message</th>
                </tr>
              </thead>
              <tbody id="recentLogsBody">
                <tr>
                  <td colspan="3" class="text-center py-4">
                    <div class="spinner-border spinner-border-sm text-light" role="status">
                      <span class="visually-hidden">Loading...</span>
                    </div>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
    
    <div class="col-md-6">
      <div class="card-dark h-100">
        <div class="card-header d-flex justify-content-between align-items-center">
          <div class="d-flex align-items-center">
            <i class="bi bi-whatsapp me-2"></i>
            <span>WhatsApp Connection</span>
          </div>
          <button id="refreshConnection" class="btn-dark-outline btn-sm">
            <i class="bi bi-arrow-clockwise me-1"></i>Refresh
          </button>
        </div>
        <div class="card-body bg-black p-0">
          <div class="p-4">
            <div class="d-flex align-items-center mb-3">
              <div id="statusBadge" class="status-badge status-unknown me-3">
                <i class="bi bi-question-circle"></i>
              </div>
              <div id="statusMessage" class="fs-5">Checking WhatsApp connection status...</div>
            </div>
            
            <div class="progress mb-4 bg-dark">
              <div id="connectionProgress" class="progress-bar bg-secondary" role="progressbar" style="width: 0%"></div>
            </div>
            
            <div id="qrCode" class="d-none text-center p-3 bg-white rounded mb-3"></div>
            
            <div id="connectionDetails">
              <!-- Connection details will be populated here -->
            </div>
            
            <div class="d-flex mt-3" id="connectionButtons">
              <button class="btn-dark-outline me-3 d-none" id="disconnectBtn">
                <i class="bi bi-x-circle me-2"></i>Disconnect
              </button>
              <button class="btn-dark-outline me-3 d-none" id="connectBtn">
                <i class="bi bi-qr-code me-2"></i>Connect
              </button>
              <button class="btn-dark-outline d-none" id="restartClient">
                <i class="bi bi-arrow-repeat me-2"></i>Restart
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-12">
      <div class="card-dark">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5 class="mb-0">Quick Actions</h5>
        </div>
        <div class="card-body">
          <div class="row g-3">
            <div class="col-md-3">
              <a href="/logs" class="btn-dark-outline d-block">
                <i class="bi bi-list-ul me-2"></i>View Logs
              </a>
            </div>
            <div class="col-md-3">
              <a href="/metrics" class="btn-dark-outline d-block">
                <i class="bi bi-graph-up me-2"></i>View Metrics
              </a>
            </div>
            <div class="col-md-3">
              <a href="/health" class="btn-dark-outline d-block">
                <i class="bi bi-heart-pulse me-2"></i>Health Check
              </a>
            </div>
            <div class="col-md-3">
              <a href="#" id="clearCache" class="btn-dark-outline d-block">
                <i class="bi bi-trash me-2"></i>Clear Cache
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Status badges */
  .status-badge {
    padding: 6px;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .status-connected {
    background-color: rgba(16, 185, 129, 0.2);
    color: #10b981;
  }
  
  .status-disconnected {
    background-color: rgba(239, 68, 68, 0.2);
    color: #ef4444;
  }
  
  .status-connecting {
    background-color: rgba(245, 158, 11, 0.2);
    color: #f59e0b;
  }
  
  .status-unknown {
    background-color: rgba(107, 114, 128, 0.2);
    color: #9ca3af;
  }
  
  /* Terminal log table */
  .terminal-log-table {
    border-spacing: 0;
    border-collapse: collapse;
    color: #ffffff;
    width: 100%;
  }
  
  .terminal-log-table th {
    text-align: left;
    padding: 8px 12px;
    border-bottom: 1px solid #333;
    color: #999;
    font-weight: normal;
    user-select: none;
    font-size: 0.85rem;
  }
  
  .terminal-log-table td {
    padding: 6px 12px;
    border-bottom: 1px solid #111;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
    font-size: 0.9rem;
  }
  
  .terminal-log-table tr:hover td {
    background-color: rgba(255, 255, 255, 0.05);
  }
  
  /* Live pulse animation */
  .pulse {
    animation: pulse-animation 2s infinite;
  }
  
  @keyframes pulse-animation {
    0% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
    100% {
      opacity: 1;
    }
  }
  
  /* Status colors for logs */
  .status-200, .status-info {
    color: #4ade80; /* green */
  }
  
  .status-300, .status-307 {
    color: #60a5fa; /* blue */
  }
  
  .status-400, .status-401, .status-404, .status-error {
    color: #f87171; /* red */
  }
  
  .status-500, .status-502, .status-503, .status-warn {
    color: #fb923c; /* orange */
  }
</style>

<script>
  let liveLogsInterval = null;
  let isLiveLogsEnabled = false;
  
  document.addEventListener('DOMContentLoaded', function() {
    // Fetch dashboard data
    fetchDashboardData();
    
    // Set up event listeners
    document.getElementById('refreshConnection').addEventListener('click', checkWhatsAppStatus);
    document.getElementById('clearCache').addEventListener('click', clearCache);
    document.getElementById('liveLogToggle').addEventListener('click', toggleLiveLogs);
    
    // Initialize with data
    checkWhatsAppStatus();
    fetchRecentLogs();
  });
  
  function toggleLiveLogs() {
    isLiveLogsEnabled = !isLiveLogsEnabled;
    const liveButton = document.getElementById('liveLogToggle');
    const liveBadge = document.getElementById('liveBadge');
    
    if (isLiveLogsEnabled) {
      // Enable live mode
      liveButton.classList.add('btn-dark-primary');
      liveButton.classList.remove('btn-dark-outline');
      liveButton.innerHTML = '<i class="bi bi-pause-fill"></i> Pause';
      liveBadge.classList.remove('d-none');
      
      // Setup auto-refresh
      liveLogsInterval = setInterval(() => {
        fetchRecentLogs(true);
      }, 2000); // Update every 2 seconds
    } else {
      // Disable live mode
      liveButton.classList.remove('btn-dark-primary');
      liveButton.classList.add('btn-dark-outline');
      liveButton.innerHTML = '<i class="bi bi-play-fill"></i> Live';
      liveBadge.classList.add('d-none');
      
      // Clear interval
      if (liveLogsInterval) {
        clearInterval(liveLogsInterval);
        liveLogsInterval = null;
      }
    }
  }
  
  async function fetchDashboardData() {
    try {
      const response = await fetch('/api/dashboard');
      const data = await response.json();
      
      document.getElementById('activeGroups').textContent = data.activeGroups || '0';
      document.getElementById('todayMessages').textContent = data.todayMessages || '0';
      document.getElementById('emailsSent').textContent = data.emailsSent || '0';
      
      const statusElement = document.getElementById('systemStatus');
      statusElement.innerHTML = '';
      
      const badge = document.createElement('span');
      badge.className = `badge ${data.systemHealthy ? 'bg-success' : 'bg-danger'}`;
      badge.textContent = data.systemHealthy ? 'Healthy' : 'Issues Detected';
      statusElement.appendChild(badge);
      
    } catch (error) {
      console.error('Error fetching dashboard data:', error);
      // Set fallback values
      document.getElementById('activeGroups').textContent = '--';
      document.getElementById('todayMessages').textContent = '--';
      document.getElementById('emailsSent').textContent = '--';
    }
  }
  
  async function fetchRecentLogs(isLiveUpdate = false) {
    const logsBody = document.getElementById('recentLogsBody');
    
    try {
      if (!isLiveUpdate) {
        logsBody.innerHTML = `
          <tr>
            <td colspan="3" class="text-center py-4">
              <div class="spinner-border spinner-border-sm text-light" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
            </td>
          </tr>
        `;
      }
      
      // Get the most recent logs from the combined.log file
      const response = await fetch('/logs/api/combined.log?lines=20');
      const data = await response.json();
      
      if (!data.lines || data.lines.length === 0) {
        logsBody.innerHTML = `
          <tr>
            <td colspan="3" class="text-center py-3 text-secondary">
              <small>No log entries found</small>
            </td>
          </tr>
        `;
        return;
      }
      
      // Create log entries
      const logRows = data.lines.map(log => {
        // Extract timestamp, level, and message
        let timestamp = '';
        let level = '';
        let message = log.raw || '';
        
        // Try to parse the log entry
        try {
          if (log.raw.includes('{')) {
            // Try to extract JSON part
            const jsonStart = log.raw.indexOf('{');
            if (jsonStart > 0) {
              const jsonStr = log.raw.substring(jsonStart);
              const jsonData = JSON.parse(jsonStr);
              level = jsonData.level || '';
              message = jsonData.message || message;
            }
          }
          
          // Extract timestamp
          const timeMatch = log.raw.match(/\d{4}-\d{2}-\d{2}|\w{3}\s\d{2}.*?\d{2}:\d{2}:\d{2}/);
          if (timeMatch) {
            timestamp = timeMatch[0];
          }
          
          // If we couldn't extract level from JSON, try to extract from text
          if (!level) {
            if (log.raw.includes('ERROR') || log.raw.toLowerCase().includes('error')) {
              level = 'error';
            } else if (log.raw.includes('WARN') || log.raw.toLowerCase().includes('warn')) {
              level = 'warn';
            } else if (log.raw.includes('INFO') || log.raw.toLowerCase().includes('info')) {
              level = 'info';
            } else if (log.raw.includes('DEBUG') || log.raw.toLowerCase().includes('debug')) {
              level = 'debug';
            }
          }
        } catch (e) {
          // Fallback if parsing fails
          const parts = log.raw.split(' ');
          timestamp = parts[0] || '';
          message = parts.slice(1).join(' ') || log.raw;
        }
        
        const levelClass = level ? `status-${level}` : '';
        const formattedTime = timestamp || new Date().toLocaleString();
        
        return `
          <tr>
            <td>${formattedTime}</td>
            <td class="${levelClass}">${level.toUpperCase() || ''}</td>
            <td>${message.substring(0, 60)}${message.length > 60 ? '...' : ''}</td>
          </tr>
        `;
      }).join('');
      
      // Update the table
      logsBody.innerHTML = logRows;
    } catch (error) {
      console.error('Error fetching recent logs:', error);
      if (!isLiveUpdate) {
        logsBody.innerHTML = `
          <tr>
            <td colspan="3" class="text-center py-3 text-danger">
              <i class="bi bi-exclamation-triangle me-1"></i>
              <small>Failed to load logs: ${error.message || 'Unknown error'}</small>
            </td>
          </tr>
        `;
      }
    }
  }
  
  async function checkWhatsAppStatus() {
    const statusBadge = document.getElementById('statusBadge');
    const statusMessage = document.getElementById('statusMessage');
    const connectionDetails = document.getElementById('connectionDetails');
    const qrCode = document.getElementById('qrCode');
    const connectBtn = document.getElementById('connectBtn');
    const disconnectBtn = document.getElementById('disconnectBtn');
    const restartBtn = document.getElementById('restartClient');
    const connectionProgress = document.getElementById('connectionProgress');
    
    try {
      // Update UI to loading state
      statusBadge.className = 'status-badge status-unknown me-3';
      statusBadge.innerHTML = '<i class="bi bi-arrow-repeat"></i>';
      statusMessage.textContent = 'Checking WhatsApp connection status...';
      connectionProgress.style.width = '30%';
      connectionProgress.className = 'progress-bar bg-info';
      
      const response = await fetch('/api/whatsapp/status');
      const data = await response.json();
      
      // Update progress
      connectionProgress.style.width = '100%';
      setTimeout(() => {
        connectionProgress.style.width = '0%';
      }, 1000);
      
      // Reset button states
      connectBtn.classList.add('d-none');
      disconnectBtn.classList.add('d-none');
      restartBtn.classList.add('d-none');
      
      // Hide any existing QR code
      qrCode.classList.add('d-none');
      qrCode.innerHTML = '';
      
      // Check status and update UI accordingly
      if (data.state === 'connected') {
        // Connected state
        statusBadge.className = 'status-badge status-connected me-3';
        statusBadge.innerHTML = '<i class="bi bi-check-circle"></i>';
        statusMessage.textContent = 'WhatsApp is connected and ready';
        connectionProgress.className = 'progress-bar bg-success';
        
        // Show disconnect and restart buttons, hide connect button
        disconnectBtn.classList.remove('d-none');
        restartBtn.classList.remove('d-none');
        
        let formattedDate = 'Unknown';
        let formattedTime = '';
        
        if (data.connectedSince) {
          const connectedDate = new Date(data.connectedSince);
          if (!isNaN(connectedDate)) {
            formattedDate = connectedDate.toLocaleDateString();
            formattedTime = connectedDate.toLocaleTimeString();
          }
        }
        
        const phoneNumber = data.phone || 'Unknown';
        const pushName = data.info?.me?.pushname || 'Unknown';

        connectionDetails.innerHTML = `
          <div class="mb-2">
            <small class="text-secondary">Connected Since:</small>
            <div class="fs-6">${formattedDate} ${formattedTime}</div>
          </div>
          <div class="mb-2">
            <small class="text-secondary">Phone Number:</small>
            <div class="fs-6">${phoneNumber}</div>
          </div>
          <div>
            <small class="text-secondary">Profile Name:</small>
            <div class="fs-6">${pushName}</div>
          </div>
        `;
      } 
      else if (data.state === 'qr_ready' && data.qrCode) {
        // QR code available - awaiting authentication
        statusBadge.className = 'status-badge status-connecting me-3';
        statusBadge.innerHTML = '<i class="bi bi-qr-code"></i>';
        statusMessage.textContent = 'Scan QR code with WhatsApp on your phone';
        connectionProgress.className = 'progress-bar bg-warning';
        
        // Display QR code
        qrCode.classList.remove('d-none');
        qrCode.innerHTML = data.qrCode;
        
        // Clear connection details
        connectionDetails.innerHTML = `
          <div class="alert alert-info p-2">
            <small>
              <i class="bi bi-info-circle me-1"></i>
              Scan the QR code with your phone to authenticate WhatsApp Web
            </small>
          </div>
        `;
        
        // Show restart button to allow restarting if QR scan fails
        restartBtn.classList.remove('d-none');
      }
      else if (data.state === 'connecting' || data.state === 'initializing') {
        // Connecting or initializing state
        statusBadge.className = 'status-badge status-connecting me-3';
        statusBadge.innerHTML = '<i class="bi bi-hourglass-split"></i>';
        statusMessage.textContent = 'Connecting to WhatsApp...';
        connectionProgress.className = 'progress-bar bg-warning progress-bar-striped progress-bar-animated';
        connectionProgress.style.width = '50%';
        
        // Clear connection details
        connectionDetails.innerHTML = `
          <div class="alert alert-warning p-2">
            <small>
              <i class="bi bi-hourglass-split me-1"></i>
              Initializing WhatsApp connection, please wait...
            </small>
          </div>
        `;
        
        // Show only restart button during connecting state
        restartBtn.classList.remove('d-none');
        
        // Check again in 3 seconds for updated status
        setTimeout(() => {
          checkWhatsAppStatus();
        }, 3000);
      }
      else if (data.state === 'error') {
        // Error state
        statusBadge.className = 'status-badge status-disconnected me-3';
        statusBadge.innerHTML = '<i class="bi bi-exclamation-triangle"></i>';
        statusMessage.textContent = 'WhatsApp connection error';
        connectionProgress.className = 'progress-bar bg-danger';
        
        // Show connect and restart buttons
        connectBtn.classList.remove('d-none');
        restartBtn.classList.remove('d-none');
        
        // Show error details
        connectionDetails.innerHTML = `
          <div class="alert alert-danger p-2">
            <small>
              <i class="bi bi-exclamation-triangle me-1"></i>
              Connection error: ${data.error || 'Unknown error'}
            </small>
          </div>
          <div class="alert alert-secondary p-2 bg-dark border-secondary">
            <small>
              <i class="bi bi-info-circle me-1"></i>
              Click "Connect" to try generating a new QR code.
            </small>
          </div>
        `;
      }
      else {
        // Disconnected state (fallback for any other state)
        statusBadge.className = 'status-badge status-disconnected me-3';
        statusBadge.innerHTML = '<i class="bi bi-x-circle"></i>';
        statusMessage.textContent = 'WhatsApp is disconnected';
        connectionProgress.className = 'progress-bar bg-danger';
        
        // Show connect button
        connectBtn.classList.remove('d-none');
        
        // Clear connection details
        connectionDetails.innerHTML = `
          <div class="alert alert-secondary p-2 bg-dark border-secondary">
            <i class="bi bi-info-circle me-1"></i>
            Not connected to WhatsApp. Click "Connect" to generate a QR code.
          </div>
        `;
      }
      
      // Reset button event listeners by creating new button elements
      const newRestartBtn = restartBtn.cloneNode(true);
      const newConnectBtn = connectBtn.cloneNode(true);
      const newDisconnectBtn = disconnectBtn.cloneNode(true);
      
      restartBtn.parentNode.replaceChild(newRestartBtn, restartBtn);
      connectBtn.parentNode.replaceChild(newConnectBtn, connectBtn);
      disconnectBtn.parentNode.replaceChild(newDisconnectBtn, disconnectBtn);
      
      // Add event listeners to the new buttons
      document.getElementById('restartClient').addEventListener('click', restartWhatsAppClient);
      document.getElementById('connectBtn').addEventListener('click', connectWhatsApp);
      document.getElementById('disconnectBtn').addEventListener('click', disconnectWhatsApp);
      
    } catch (error) {
      console.error('Error checking WhatsApp status:', error);
      
      // Set error state
      statusBadge.className = 'status-badge status-disconnected me-3';
      statusBadge.innerHTML = '<i class="bi bi-exclamation-circle"></i>';
      statusMessage.textContent = 'Error checking WhatsApp status';
      connectionProgress.className = 'progress-bar bg-danger';
      connectionProgress.style.width = '100%';
      
      // Show details of error
      connectionDetails.innerHTML = `
        <div class="alert alert-danger p-2">
          <small>
            <i class="bi bi-exclamation-triangle me-1"></i>
            Error: ${error.message || 'Unknown error'}
          </small>
        </div>
      `;
      
      // Show connect and restart buttons on error
      connectBtn.classList.remove('d-none');
      restartBtn.classList.remove('d-none');
    }
  }
  
  async function disconnectWhatsApp() {
    if (confirm('Are you sure you want to disconnect the WhatsApp client? You will need to scan a QR code to reconnect.')) {
      try {
        // Update UI to show disconnection in progress
        document.getElementById('statusBadge').className = 'status-badge status-connecting me-3';
        document.getElementById('statusBadge').innerHTML = '<i class="bi bi-arrow-clockwise"></i>';
        document.getElementById('statusMessage').textContent = 'Disconnecting WhatsApp...';
        document.getElementById('connectionProgress').style.width = '50%';
        document.getElementById('connectionProgress').className = 'progress-bar bg-warning progress-bar-striped progress-bar-animated';
        
        // Hide all buttons while disconnecting
        document.getElementById('connectBtn').classList.add('d-none');
        document.getElementById('disconnectBtn').classList.add('d-none');
        document.getElementById('restartClient').classList.add('d-none');
        
        // Use the disconnect endpoint
        const response = await fetch('/api/whatsapp/disconnect', {
          method: 'POST'
        });
        
        if (response.ok) {
          // Show connect button right away
          document.getElementById('statusBadge').className = 'status-badge status-disconnected me-3';
          document.getElementById('statusBadge').innerHTML = '<i class="bi bi-x-circle"></i>';
          document.getElementById('statusMessage').textContent = 'WhatsApp is disconnected';
          document.getElementById('connectionProgress').className = 'progress-bar bg-danger';
          document.getElementById('connectionProgress').style.width = '100%';
          setTimeout(() => {
            document.getElementById('connectionProgress').style.width = '0%';
          }, 1000);
          
          // Show connect button
          document.getElementById('connectBtn').classList.remove('d-none');
          document.getElementById('restartClient').classList.remove('d-none');
          
          // Clear connection details
          document.getElementById('connectionDetails').innerHTML = `
            <div class="alert alert-secondary p-2 bg-dark border-secondary">
              <i class="bi bi-info-circle me-1"></i>
              Disconnected. Click "Connect" to generate a QR code and reconnect.
            </div>
          `;
          
          // Check the new status after disconnection
          setTimeout(() => {
            checkWhatsAppStatus();
          }, 2000);
        } else {
          const data = await response.json();
          alert(`Failed to disconnect WhatsApp: ${data.error || 'Unknown error'}`);
          checkWhatsAppStatus();
        }
      } catch (error) {
        console.error('Error disconnecting WhatsApp:', error);
        alert(`Error disconnecting WhatsApp: ${error.message || 'Unknown error'}`);
        checkWhatsAppStatus();
      }
    }
  }
  
  async function restartWhatsAppClient() {
    if (confirm('Are you sure you want to restart the WhatsApp client?')) {
      try {
        // Update UI to show restart in progress
        document.getElementById('statusBadge').className = 'status-badge status-connecting me-3';
        document.getElementById('statusBadge').innerHTML = '<i class="bi bi-arrow-clockwise"></i>';
        document.getElementById('statusMessage').textContent = 'Restarting WhatsApp client...';
        document.getElementById('connectionProgress').style.width = '50%';
        document.getElementById('connectionProgress').className = 'progress-bar bg-warning progress-bar-striped progress-bar-animated';
        
        // Hide all buttons during restart
        document.getElementById('connectBtn').classList.add('d-none');
        document.getElementById('disconnectBtn').classList.add('d-none');
        document.getElementById('restartClient').classList.add('d-none');
        
        // Clear any existing QR code
        document.getElementById('qrCode').innerHTML = '';
        document.getElementById('qrCode').classList.add('d-none');
        
        const response = await fetch('/api/whatsapp/restart', {
          method: 'POST'
        });
        
        if (response.ok) {
          // Show a message during restart
          document.getElementById('connectionDetails').innerHTML = `
            <div class="alert alert-warning p-2">
              <i class="bi bi-arrow-repeat me-1"></i>
              Restarting WhatsApp client, please wait...
            </div>
          `;
          
          // Regular polling to check status and look for QR code
          let checkCount = 0;
          const statusCheckInterval = setInterval(() => {
            checkCount++;
            fetch('/api/whatsapp/status')
              .then(resp => resp.json())
              .then(data => {
                if (data.qrCode) {
                  // QR code is ready
                  document.getElementById('qrCode').innerHTML = data.qrCode;
                  document.getElementById('qrCode').classList.remove('d-none');
                  
                  document.getElementById('statusBadge').className = 'status-badge status-connecting me-3';
                  document.getElementById('statusBadge').innerHTML = '<i class="bi bi-qr-code"></i>';
                  document.getElementById('statusMessage').textContent = 'Scan QR code with WhatsApp on your phone';
                  
                  clearInterval(statusCheckInterval);
                  checkWhatsAppStatus();
                } else if (data.connected) {
                  // Connected successfully
                  clearInterval(statusCheckInterval);
                  checkWhatsAppStatus();
                } else if (checkCount >= 15) {
                  // Stop checking after 15 attempts (30 seconds)
                  clearInterval(statusCheckInterval);
                  checkWhatsAppStatus();
                }
              })
              .catch(err => {
                console.error("Error checking status during restart:", err);
                clearInterval(statusCheckInterval);
                checkWhatsAppStatus();
              });
          }, 2000);
        } else {
          const data = await response.json();
          alert(`Failed to restart WhatsApp client: ${data.error || 'Unknown error'}`);
          checkWhatsAppStatus();
        }
      } catch (error) {
        console.error('Error restarting WhatsApp client:', error);
        alert(`Error restarting WhatsApp client: ${error.message || 'Unknown error'}`);
        checkWhatsAppStatus();
      }
    }
  }
  
  async function connectWhatsApp() {
    if (confirm('Do you want to connect to WhatsApp? This will generate a new QR code to scan.')) {
      try {
        // Update UI to show connection in progress
        document.getElementById('statusBadge').className = 'status-badge status-connecting me-3';
        document.getElementById('statusBadge').innerHTML = '<i class="bi bi-arrow-clockwise"></i>';
        document.getElementById('statusMessage').textContent = 'Initializing WhatsApp client...';
        document.getElementById('connectionProgress').style.width = '50%';
        document.getElementById('connectionProgress').className = 'progress-bar bg-warning progress-bar-striped progress-bar-animated';
        
        // Hide all buttons while connecting
        document.getElementById('connectBtn').classList.add('d-none');
        document.getElementById('disconnectBtn').classList.add('d-none');
        document.getElementById('restartClient').classList.add('d-none');
        
        // Clear any existing QR code
        document.getElementById('qrCode').innerHTML = '';
        document.getElementById('qrCode').classList.add('d-none');
        
        // Use the connect endpoint for QR code generation
        const response = await fetch('/api/whatsapp/connect', {
          method: 'POST'
        });
        
        if (response.ok) {
          // Show a message during connection
          document.getElementById('connectionDetails').innerHTML = `
            <div class="alert alert-warning p-2">
              <i class="bi bi-hourglass-split me-1"></i>
              Generating QR code, please wait...
            </div>
          `;
          
          // Start checking for status to see QR code
          setTimeout(() => {
            checkWhatsAppStatus();
          }, 3000);
          
          // Check again after a longer delay if needed
          setTimeout(() => {
            checkWhatsAppStatus();
          }, 8000);
          
          // Set up a periodic check until QR code appears
          let checkCount = 0;
          const qrCheckInterval = setInterval(() => {
            checkCount++;
            fetch('/api/whatsapp/status')
              .then(resp => resp.json())
              .then(data => {
                if (data.qrCode) {
                  // QR code is ready
                  document.getElementById('qrCode').innerHTML = data.qrCode;
                  document.getElementById('qrCode').classList.remove('d-none');
                  clearInterval(qrCheckInterval);
                  checkWhatsAppStatus();
                } else if (checkCount >= 10) {
                  // Stop checking after 10 attempts (20 seconds)
                  clearInterval(qrCheckInterval);
                  checkWhatsAppStatus();
                }
              })
              .catch(err => {
                console.error("Error checking for QR code:", err);
                clearInterval(qrCheckInterval);
              });
          }, 2000);
        } else {
          const data = await response.json();
          alert(`Failed to connect WhatsApp: ${data.error || 'Unknown error'}`);
          checkWhatsAppStatus();
        }
      } catch (error) {
        console.error('Error connecting WhatsApp:', error);
        alert(`Error connecting WhatsApp: ${error.message || 'Unknown error'}`);
        checkWhatsAppStatus();
      }
    }
  }
  
  async function clearCache() {
    if (confirm('Are you sure you want to clear the application cache?')) {
      try {
        const response = await fetch('/api/cache/clear', {
          method: 'POST'
        });
        
        if (response.ok) {
          alert('Cache cleared successfully');
        } else {
          const data = await response.json();
          alert(`Failed to clear cache: ${data.error || 'Unknown error'}`);
        }
      } catch (error) {
        console.error('Error clearing cache:', error);
        alert(`Error clearing cache: ${error.message || 'Unknown error'}`);
      }
    }
  }
</script> 